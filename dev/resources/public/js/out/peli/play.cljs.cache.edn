;; Analyzed by ClojureScript 1.7.145
{:use-macros {go cljs.core.async.macros, go-loop cljs.core.async.macros}, :excludes #{}, :name peli.play, :imports nil, :requires {svg peli.svg-adaptor, peli.svg-adaptor peli.svg-adaptor, peli peli.engine, peli.engine peli.engine, debugger peli.time-debugger, peli.time-debugger peli.time-debugger, cljs.core.async cljs.core.async}, :uses {timeout cljs.core.async, chan cljs.core.async, put! cljs.core.async}, :defs {->BadGuy {:protocol-inline nil, :meta {:file "/Users/ckirkendall/Development/clojure/peli/dev/src/peli/play.cljs", :line 89, :column 12, :end-line 89, :end-column 18, :internal-ctor true, :factory :positional, :arglists (quote ([id width height x y vx vy]))}, :name peli.play/->BadGuy, :variadic false, :file "dev/src/peli/play.cljs", :end-column 18, :method-params ([id width height x y vx vy]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :positional, :line 89, :end-line 89, :max-fixed-arity 7, :fn-var true, :arglists (quote ([id width height x y vx vy]))}, kill-bad-guy {:protocol-inline nil, :meta {:file "/Users/ckirkendall/Development/clojure/peli/dev/src/peli/play.cljs", :line 32, :column 7, :end-line 32, :end-column 19, :arglists (quote ([ch]))}, :name peli.play/kill-bad-guy, :variadic false, :file "dev/src/peli/play.cljs", :end-column 19, :method-params ([ch]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 32, :end-line 32, :max-fixed-arity 1, :fn-var true, :arglists (quote ([ch]))}, ->Hero {:protocol-inline nil, :meta {:file "/Users/ckirkendall/Development/clojure/peli/dev/src/peli/play.cljs", :line 62, :column 12, :end-line 62, :end-column 16, :internal-ctor true, :factory :positional, :arglists (quote ([id width height x y vx vy]))}, :name peli.play/->Hero, :variadic false, :file "dev/src/peli/play.cljs", :end-column 16, :method-params ([id width height x y vx vy]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :positional, :line 62, :end-line 62, :max-fixed-arity 7, :fn-var true, :arglists (quote ([id width height x y vx vy]))}, map->Reward {:protocol-inline nil, :meta {:file "/Users/ckirkendall/Development/clojure/peli/dev/src/peli/play.cljs", :line 44, :column 12, :end-line 44, :end-column 18, :internal-ctor true, :factory :map, :arglists (quote ([G__25357]))}, :name peli.play/map->Reward, :variadic false, :file "dev/src/peli/play.cljs", :end-column 18, :method-params ([G__25357]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :map, :line 44, :end-line 44, :max-fixed-arity 1, :fn-var true, :arglists (quote ([G__25357]))}, ->Reward {:protocol-inline nil, :meta {:file "/Users/ckirkendall/Development/clojure/peli/dev/src/peli/play.cljs", :line 44, :column 12, :end-line 44, :end-column 18, :internal-ctor true, :factory :positional, :arglists (quote ([id width height x y]))}, :name peli.play/->Reward, :variadic false, :file "dev/src/peli/play.cljs", :end-column 18, :method-params ([id width height x y]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :positional, :line 44, :end-line 44, :max-fixed-arity 5, :fn-var true, :arglists (quote ([id width height x y]))}, hero-img {:protocol-inline nil, :meta {:file "/Users/ckirkendall/Development/clojure/peli/dev/src/peli/play.cljs", :line 11, :column 7, :end-line 11, :end-column 15, :arglists (quote ([{:keys [vx vy]}]))}, :name peli.play/hero-img, :variadic false, :file "dev/src/peli/play.cljs", :end-column 15, :method-params ([p__25336]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 11, :end-line 11, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{:keys [vx vy]}]))}, game-config {:name peli.play/game-config, :file "dev/src/peli/play.cljs", :line 185, :column 1, :end-line 185, :end-column 17, :meta {:file "/Users/ckirkendall/Development/clojure/peli/dev/src/peli/play.cljs", :line 185, :column 6, :end-line 185, :end-column 17}}, BadGuy {:meta {:file "/Users/ckirkendall/Development/clojure/peli/dev/src/peli/play.cljs", :line 9, :column 15, :end-line 9, :end-column 21, :declared true}, :num-fields 7, :protocols #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection peli.engine/Gravity cljs.core/ICounted peli.engine/Pen cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IIterable peli.engine/Physics peli.engine/Collision cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :name peli.play/BadGuy, :file "dev/src/peli/play.cljs", :end-column 18, :type true, :column 12, :internal-ctor true, :line 89, :record true, :declared true, :end-line 89, :skip-protocol-flag #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}}, map->BadGuy {:protocol-inline nil, :meta {:file "/Users/ckirkendall/Development/clojure/peli/dev/src/peli/play.cljs", :line 89, :column 12, :end-line 89, :end-column 18, :internal-ctor true, :factory :map, :arglists (quote ([G__25382]))}, :name peli.play/map->BadGuy, :variadic false, :file "dev/src/peli/play.cljs", :end-column 18, :method-params ([G__25382]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :map, :line 89, :end-line 89, :max-fixed-arity 1, :fn-var true, :arglists (quote ([G__25382]))}, game {:name peli.play/game, :file "dev/src/peli/play.cljs", :line 194, :column 1, :end-line 194, :end-column 14, :meta {:file "/Users/ckirkendall/Development/clojure/peli/dev/src/peli/play.cljs", :line 194, :column 10, :end-line 194, :end-column 14}}, Reward {:num-fields 5, :protocols #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted peli.engine/Pen cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IIterable peli.engine/Physics peli.engine/Collision cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :name peli.play/Reward, :file "dev/src/peli/play.cljs", :end-column 18, :type true, :column 12, :internal-ctor true, :line 44, :record true, :end-line 44, :skip-protocol-flag #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}}, key-actions {:name peli.play/key-actions, :file "dev/src/peli/play.cljs", :line 120, :column 1, :end-line 120, :end-column 17, :meta {:file "/Users/ckirkendall/Development/clojure/peli/dev/src/peli/play.cljs", :line 120, :column 6, :end-line 120, :end-column 17}}, reward {:protocol-inline nil, :meta {:file "/Users/ckirkendall/Development/clojure/peli/dev/src/peli/play.cljs", :line 24, :column 7, :end-line 24, :end-column 13, :arglists (quote ([ch]))}, :name peli.play/reward, :variadic false, :file "dev/src/peli/play.cljs", :end-column 13, :method-params ([ch]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 24, :end-line 24, :max-fixed-arity 1, :fn-var true, :arglists (quote ([ch]))}, Hero {:meta {:file "/Users/ckirkendall/Development/clojure/peli/dev/src/peli/play.cljs", :line 9, :column 10, :end-line 9, :end-column 14, :declared true}, :num-fields 7, :protocols #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection peli.engine/Gravity cljs.core/ICounted peli.engine/Pen cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IIterable peli.engine/Physics peli.engine/Collision cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :name peli.play/Hero, :file "dev/src/peli/play.cljs", :end-column 16, :type true, :column 12, :internal-ctor true, :line 62, :record true, :declared true, :end-line 62, :skip-protocol-flag #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}}, game-state {:name peli.play/game-state, :file "dev/src/peli/play.cljs", :line 192, :column 1, :end-line 192, :end-column 20, :meta {:file "/Users/ckirkendall/Development/clojure/peli/dev/src/peli/play.cljs", :line 192, :column 10, :end-line 192, :end-column 20}}, world {:name peli.play/world, :file "dev/src/peli/play.cljs", :line 133, :column 1, :end-line 133, :end-column 11, :meta {:file "/Users/ckirkendall/Development/clojure/peli/dev/src/peli/play.cljs", :line 133, :column 6, :end-line 133, :end-column 11}}, map->Hero {:protocol-inline nil, :meta {:file "/Users/ckirkendall/Development/clojure/peli/dev/src/peli/play.cljs", :line 62, :column 12, :end-line 62, :end-column 16, :internal-ctor true, :factory :map, :arglists (quote ([G__25369]))}, :name peli.play/map->Hero, :variadic false, :file "dev/src/peli/play.cljs", :end-column 16, :method-params ([G__25369]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :map, :line 62, :end-line 62, :max-fixed-arity 1, :fn-var true, :arglists (quote ([G__25369]))}}, :require-macros {cljs.core.async.macros cljs.core.async.macros}, :cljs.analyzer/constants {:seen #{:y x :hero :paused :mario-stand-right :b2 :font-color :color :dead :on-up height :bottom :mario-walk-left :else :world1 :top :unpause y :fill :b1 :width :start :on-down :mario-jump-right :gone :b10 :b8 :reward :debug :state :r2 :font :hide :style :g :r3 :vx width :b7 :vy :r1 :b4 :id :update-entity :mario-walk-right :score :b9 :b3 :right :health :debug-ch :b6 :pause vx :lives :x vy id :coin :r4 :bad1 :rect :update-state :jump :b5 :mario-jump-left :img :goomba :height :any :left :text :stomp}, :order [:vx :vy :else :id :hide :update-state :score :state :gone :update-entity :y :height :dead :width :x :any :rect :style :fill id width height x y :bottom :g :text :font :font-color vx vy :left :right :top :on-down :on-up :hero :start :unpause :pause :debug :img :color :b1 :b2 :b3 :b4 :b6 :b7 :b8 :b9 :b10 :bad1 :r1 :r2 :r3 :r4 :b5 :mario-stand-right :mario-jump-right :mario-jump-left :mario-walk-right :mario-walk-left :goomba :coin :jump :stomp :reward :paused :world1 :health :lives :debug-ch]}, :doc nil}