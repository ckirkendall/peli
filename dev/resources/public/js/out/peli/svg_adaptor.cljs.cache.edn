;; Analyzed by ClojureScript 1.7.145
{:use-macros {go cljs.core.async.macros, go-loop cljs.core.async.macros}, :excludes #{}, :name peli.svg-adaptor, :imports nil, :requires {peli peli.engine, reagent reagent.core, peli.engine peli.engine, peli.time-debugger peli.time-debugger, data clojure.data, reagent.core reagent.core, cljs.core.async cljs.core.async, clojure.set clojure.set, s clojure.set, clojure.data clojure.data, d peli.time-debugger}, :uses {timeout cljs.core.async, atom reagent.core, diff clojure.data, chan cljs.core.async, cursor reagent.core, put! cljs.core.async}, :defs {draw-body {:protocol-inline nil, :meta {:file "/Users/ckirkendall/Development/clojure/peli/src/peli/svg_adaptor.cljs", :line 186, :column 7, :end-line 186, :end-column 16, :arglists (quote ([game id ch]))}, :name peli.svg-adaptor/draw-body, :variadic false, :file "src/peli/svg_adaptor.cljs", :end-column 16, :method-params ([game id ch]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 186, :end-line 186, :max-fixed-arity 3, :fn-var true, :arglists (quote ([game id ch]))}, TextPrompt {:num-fields 6, :protocols #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted peli.engine/Pen cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IIterable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :name peli.svg-adaptor/TextPrompt, :file "src/peli/svg_adaptor.cljs", :end-column 22, :type true, :column 12, :internal-ctor true, :line 138, :record true, :end-line 138, :skip-protocol-flag #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}}, map->Block {:protocol-inline nil, :meta {:file "/Users/ckirkendall/Development/clojure/peli/src/peli/svg_adaptor.cljs", :line 132, :column 12, :end-line 132, :end-column 17, :internal-ctor true, :factory :map, :arglists (quote ([G__20859]))}, :name peli.svg-adaptor/map->Block, :variadic false, :file "src/peli/svg_adaptor.cljs", :end-column 17, :method-params ([G__20859]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :map, :line 132, :end-line 132, :max-fixed-arity 1, :fn-var true, :arglists (quote ([G__20859]))}, get-entity-cursor {:protocol-inline nil, :meta {:file "/Users/ckirkendall/Development/clojure/peli/src/peli/svg_adaptor.cljs", :line 17, :column 7, :end-line 17, :end-column 24, :arglists (quote ([data-atm id]))}, :name peli.svg-adaptor/get-entity-cursor, :variadic false, :file "src/peli/svg_adaptor.cljs", :end-column 24, :method-params ([data-atm id]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 17, :end-line 17, :max-fixed-arity 2, :fn-var true, :arglists (quote ([data-atm id]))}, rounded-rect {:protocol-inline nil, :meta {:file "/Users/ckirkendall/Development/clojure/peli/src/peli/svg_adaptor.cljs", :line 117, :column 7, :end-line 117, :end-column 19, :arglists (quote ([fill width height x y radii]))}, :name peli.svg-adaptor/rounded-rect, :variadic false, :file "src/peli/svg_adaptor.cljs", :end-column 19, :method-params ([fill width height x y radii]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 117, :end-line 117, :max-fixed-arity 6, :fn-var true, :arglists (quote ([fill width height x y radii]))}, ->Block {:protocol-inline nil, :meta {:file "/Users/ckirkendall/Development/clojure/peli/src/peli/svg_adaptor.cljs", :line 132, :column 12, :end-line 132, :end-column 17, :internal-ctor true, :factory :positional, :arglists (quote ([id fill width height x y radii]))}, :name peli.svg-adaptor/->Block, :variadic false, :file "src/peli/svg_adaptor.cljs", :end-column 17, :method-params ([id fill width height x y radii]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :positional, :line 132, :end-line 132, :max-fixed-arity 7, :fn-var true, :arglists (quote ([id fill width height x y radii]))}, Block {:num-fields 7, :protocols #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted peli.engine/Pen cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IIterable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :name peli.svg-adaptor/Block, :file "src/peli/svg_adaptor.cljs", :end-column 17, :type true, :column 12, :internal-ctor true, :line 132, :record true, :end-line 132, :skip-protocol-flag #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}}, draw-world {:protocol-inline nil, :meta {:file "/Users/ckirkendall/Development/clojure/peli/src/peli/svg_adaptor.cljs", :line 213, :column 7, :end-line 213, :end-column 17, :arglists (quote ([game ch]))}, :name peli.svg-adaptor/draw-world, :variadic false, :file "src/peli/svg_adaptor.cljs", :end-column 17, :method-params ([game ch]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 213, :end-line 213, :max-fixed-arity 2, :fn-var true, :arglists (quote ([game ch]))}, map->TextPrompt {:protocol-inline nil, :meta {:file "/Users/ckirkendall/Development/clojure/peli/src/peli/svg_adaptor.cljs", :line 138, :column 12, :end-line 138, :end-column 22, :internal-ctor true, :factory :map, :arglists (quote ([G__20867]))}, :name peli.svg-adaptor/map->TextPrompt, :variadic false, :file "src/peli/svg_adaptor.cljs", :end-column 22, :method-params ([G__20867]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :map, :line 138, :end-line 138, :max-fixed-arity 1, :fn-var true, :arglists (quote ([G__20867]))}, create-sprite-defs {:protocol-inline nil, :meta {:file "/Users/ckirkendall/Development/clojure/peli/src/peli/svg_adaptor.cljs", :line 178, :column 7, :end-line 178, :end-column 25, :arglists (quote ([sprites]))}, :name peli.svg-adaptor/create-sprite-defs, :variadic false, :file "src/peli/svg_adaptor.cljs", :end-column 25, :method-params ([sprites]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 178, :end-line 178, :max-fixed-arity 1, :fn-var true, :arglists (quote ([sprites]))}, svg-game {:protocol-inline nil, :meta {:file "/Users/ckirkendall/Development/clojure/peli/src/peli/svg_adaptor.cljs", :line 20, :column 7, :end-line 20, :end-column 15, :arglists (quote ([data]))}, :name peli.svg-adaptor/svg-game, :variadic false, :file "src/peli/svg_adaptor.cljs", :end-column 15, :method-params ([data]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 20, :end-line 20, :max-fixed-arity 1, :fn-var true, :arglists (quote ([data]))}, draw-overlays {:protocol-inline nil, :meta {:file "/Users/ckirkendall/Development/clojure/peli/src/peli/svg_adaptor.cljs", :line 206, :column 7, :end-line 206, :end-column 20, :arglists (quote ([game ch]))}, :name peli.svg-adaptor/draw-overlays, :variadic false, :file "src/peli/svg_adaptor.cljs", :end-column 20, :method-params ([game ch]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 206, :end-line 206, :max-fixed-arity 2, :fn-var true, :arglists (quote ([game ch]))}, debug-flag {:name peli.svg-adaptor/debug-flag, :file "src/peli/svg_adaptor.cljs", :line 13, :column 1, :end-line 13, :end-column 16, :meta {:file "/Users/ckirkendall/Development/clojure/peli/src/peli/svg_adaptor.cljs", :line 13, :column 6, :end-line 13, :end-column 16}}, step-action {:protocol-inline nil, :meta {:file "/Users/ckirkendall/Development/clojure/peli/src/peli/svg_adaptor.cljs", :line 162, :column 7, :end-line 162, :end-column 18, :arglists (quote ([game ch]))}, :name peli.svg-adaptor/step-action, :variadic false, :file "src/peli/svg_adaptor.cljs", :end-column 18, :method-params ([game ch]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 162, :end-line 162, :max-fixed-arity 2, :fn-var true, :arglists (quote ([game ch]))}, draw-solids {:protocol-inline nil, :meta {:file "/Users/ckirkendall/Development/clojure/peli/src/peli/svg_adaptor.cljs", :line 192, :column 7, :end-line 192, :end-column 18, :arglists (quote ([game ch]))}, :name peli.svg-adaptor/draw-solids, :variadic false, :file "src/peli/svg_adaptor.cljs", :end-column 18, :method-params ([game ch]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 192, :end-line 192, :max-fixed-arity 2, :fn-var true, :arglists (quote ([game ch]))}, draw-characters {:protocol-inline nil, :meta {:file "/Users/ckirkendall/Development/clojure/peli/src/peli/svg_adaptor.cljs", :line 199, :column 7, :end-line 199, :end-column 22, :arglists (quote ([game ch]))}, :name peli.svg-adaptor/draw-characters, :variadic false, :file "src/peli/svg_adaptor.cljs", :end-column 22, :method-params ([game ch]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 199, :end-line 199, :max-fixed-arity 2, :fn-var true, :arglists (quote ([game ch]))}, ->TextPrompt {:protocol-inline nil, :meta {:file "/Users/ckirkendall/Development/clojure/peli/src/peli/svg_adaptor.cljs", :line 138, :column 12, :end-line 138, :end-column 22, :internal-ctor true, :factory :positional, :arglists (quote ([id width height text hidden? options]))}, :name peli.svg-adaptor/->TextPrompt, :variadic false, :file "src/peli/svg_adaptor.cljs", :end-column 22, :method-params ([id width height text hidden? options]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :positional, :line 138, :end-line 138, :max-fixed-arity 6, :fn-var true, :arglists (quote ([id width height text hidden? options]))}}, :require-macros {cljs.core.async.macros cljs.core.async.macros}, :cljs.analyzer/constants {:seen #{:y :args :path options x :overlays :paused :characters :font-color :stroke :framed :transform :frame :color height :key text :else :radii y :active-world :xlinkHref :fill :registry :mode :width :key-actions :debug :src :state :worlds radii :font :running :run-state fill :style :div :g :event width :hidden :hidden? :label :id :defs :svg :collision-matrix :image :d :action :sounds :options :x :audio id hidden? :rect :img :sprites :height :board :pattern :text :span :solids}, :order [:active-world :registry :frame :board :state :solids :characters :framed :overlays :run-state :paused :running :sprites :sounds :worlds :key-actions :collision-matrix :hidden :mode :debug :event :div :id :label :span :action :args :path :d :fill :width :height :x :y :radii id fill width height x y radii :text :hidden? :options :g :style :font :stroke :font-color text hidden? options :else :defs :img :pattern :key :image :xlinkHref :audio :src :svg :rect :color :transform]}, :doc nil}