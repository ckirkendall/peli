;; Analyzed by ClojureScript 1.7.145
{:use-macros {go cljs.core.async.macros, go-loop cljs.core.async.macros}, :excludes #{}, :name peli.engine, :imports nil, :requires {cljs.core.async cljs.core.async, reagent reagent.core, reagent.core reagent.core, s clojure.set, clojure.set clojure.set, clojure.data clojure.data, cljs.pprint cljs.pprint}, :uses {timeout cljs.core.async, pprint cljs.pprint, atom reagent.core, diff clojure.data, chan cljs.core.async, put! cljs.core.async}, :defs {apply-physics {:protocol-inline nil, :meta {:file "/Users/ckirkendall/Development/clojure/peli/src/peli/engine.cljs", :line 181, :column 7, :end-line 181, :end-column 20, :arglists (quote ([obj game] [obj game time-diff])), :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([obj game] [obj game time-diff]), :arglists ([obj game] [obj game time-diff]), :arglists-meta (nil nil)}}, :name peli.engine/apply-physics, :variadic false, :file "src/peli/engine.cljs", :end-column 20, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([obj game] [obj game time-diff]), :arglists ([obj game] [obj game time-diff]), :arglists-meta (nil nil)}, :method-params ([obj game] [obj game time-diff]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 181, :end-line 181, :max-fixed-arity 3, :fn-var true, :arglists ([obj game] [obj game time-diff])}, World {:num-fields 11, :protocols #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IIterable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :name peli.engine/World, :file "src/peli/engine.cljs", :end-column 17, :type true, :column 12, :internal-ctor true, :line 89, :record true, :end-line 89, :skip-protocol-flag #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}}, -sprites {:protocol-inline nil, :meta {:file "/Users/ckirkendall/Development/clojure/peli/src/peli/engine.cljs", :line 30, :column 4, :end-line 30, :end-column 12, :protocol peli.engine/IGame, :doc nil, :arglists (quote ([this]))}, :protocol peli.engine/IGame, :name peli.engine/-sprites, :variadic false, :file "src/peli/engine.cljs", :end-column 12, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 25, :end-line 30, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc nil}, ->Game {:protocol-inline nil, :meta {:file "/Users/ckirkendall/Development/clojure/peli/src/peli/engine.cljs", :line 101, :column 12, :end-line 101, :end-column 16, :internal-ctor true, :factory :positional, :arglists (quote ([worlds active-world state]))}, :name peli.engine/->Game, :variadic false, :file "src/peli/engine.cljs", :end-column 16, :method-params ([worlds active-world state]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :positional, :line 101, :end-line 101, :max-fixed-arity 3, :fn-var true, :arglists (quote ([worlds active-world state]))}, sounds {:protocol-inline nil, :meta {:file "/Users/ckirkendall/Development/clojure/peli/src/peli/engine.cljs", :line 62, :column 7, :end-line 62, :end-column 13, :arglists (quote ([game]))}, :name peli.engine/sounds, :variadic false, :file "src/peli/engine.cljs", :end-column 13, :method-params ([game]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 62, :end-line 62, :max-fixed-arity 1, :fn-var true, :arglists (quote ([game]))}, draw {:protocol-inline nil, :meta {:file "/Users/ckirkendall/Development/clojure/peli/src/peli/engine.cljs", :line 116, :column 5, :end-line 116, :end-column 9, :protocol peli.engine/Pen, :doc nil, :arglists (quote ([this game ch]))}, :protocol peli.engine/Pen, :name peli.engine/draw, :variadic false, :file "src/peli/engine.cljs", :end-column 9, :method-params ([this game ch]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 115, :end-line 116, :max-fixed-arity 3, :fn-var true, :arglists (quote ([this game ch])), :doc nil}, -step {:protocol-inline nil, :meta {:file "/Users/ckirkendall/Development/clojure/peli/src/peli/engine.cljs", :line 53, :column 4, :end-line 53, :end-column 9, :protocol peli.engine/IGame, :doc nil, :arglists (quote ([this ch]))}, :protocol peli.engine/IGame, :name peli.engine/-step, :variadic false, :file "src/peli/engine.cljs", :end-column 9, :method-params ([this ch]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 25, :end-line 53, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this ch])), :doc nil}, -update-entity {:protocol-inline nil, :meta {:file "/Users/ckirkendall/Development/clojure/peli/src/peli/engine.cljs", :line 49, :column 4, :end-line 49, :end-column 18, :protocol peli.engine/IGame, :doc nil, :arglists (quote ([this id func]))}, :protocol peli.engine/IGame, :name peli.engine/-update-entity, :variadic false, :file "src/peli/engine.cljs", :end-column 18, :method-params ([this id func]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 25, :end-line 49, :max-fixed-arity 3, :fn-var true, :arglists (quote ([this id func])), :doc nil}, -switch-worlds {:protocol-inline nil, :meta {:file "/Users/ckirkendall/Development/clojure/peli/src/peli/engine.cljs", :line 48, :column 4, :end-line 48, :end-column 18, :protocol peli.engine/IGame, :doc nil, :arglists (quote ([this world-id]))}, :protocol peli.engine/IGame, :name peli.engine/-switch-worlds, :variadic false, :file "src/peli/engine.cljs", :end-column 18, :method-params ([this world-id]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 25, :end-line 48, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this world-id])), :doc nil}, render-game {:protocol-inline nil, :meta {:file "/Users/ckirkendall/Development/clojure/peli/src/peli/engine.cljs", :line 458, :column 7, :end-line 458, :end-column 18, :arglists (quote ([{:keys [game event-ch], :as x} target-id]))}, :name peli.engine/render-game, :variadic false, :file "src/peli/engine.cljs", :end-column 18, :method-params ([p__25328 target-id]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 458, :end-line 458, :max-fixed-arity 2, :fn-var true, :arglists (quote ([{:keys [game event-ch], :as x} target-id]))}, step {:protocol-inline nil, :meta {:file "/Users/ckirkendall/Development/clojure/peli/src/peli/engine.cljs", :line 83, :column 8, :end-line 83, :end-column 12, :private true, :arglists (quote ([game ch]))}, :private true, :name peli.engine/step, :variadic false, :file "src/peli/engine.cljs", :end-column 12, :method-params ([game ch]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 83, :end-line 83, :max-fixed-arity 2, :fn-var true, :arglists (quote ([game ch]))}, build-matrix {:protocol-inline nil, :meta {:file "/Users/ckirkendall/Development/clojure/peli/src/peli/engine.cljs", :line 251, :column 7, :end-line 251, :end-column 19, :arglists (quote ([block-size width height]))}, :name peli.engine/build-matrix, :variadic false, :file "src/peli/engine.cljs", :end-column 19, :method-params ([block-size width height]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 251, :end-line 251, :max-fixed-arity 3, :fn-var true, :arglists (quote ([block-size width height]))}, entity {:protocol-inline nil, :meta {:file "/Users/ckirkendall/Development/clojure/peli/src/peli/engine.cljs", :line 69, :column 7, :end-line 69, :end-column 13, :arglists (quote ([game id]))}, :name peli.engine/entity, :variadic false, :file "src/peli/engine.cljs", :end-column 13, :method-params ([game id]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 69, :end-line 69, :max-fixed-arity 2, :fn-var true, :arglists (quote ([game id]))}, check-bounds {:protocol-inline nil, :meta {:file "/Users/ckirkendall/Development/clojure/peli/src/peli/engine.cljs", :line 160, :column 7, :end-line 160, :end-column 19, :arglists (quote ([n offset min max]))}, :name peli.engine/check-bounds, :variadic false, :file "src/peli/engine.cljs", :end-column 19, :method-params ([n offset min max]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 160, :end-line 160, :max-fixed-arity 4, :fn-var true, :arglists (quote ([n offset min max]))}, update-state {:protocol-inline nil, :meta {:file "/Users/ckirkendall/Development/clojure/peli/src/peli/engine.cljs", :line 77, :column 8, :end-line 77, :end-column 20, :private true, :arglists (quote ([game func]))}, :private true, :name peli.engine/update-state, :variadic false, :file "src/peli/engine.cljs", :end-column 20, :method-params ([game func]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 77, :end-line 77, :max-fixed-arity 2, :fn-var true, :arglists (quote ([game func]))}, sprites {:protocol-inline nil, :meta {:file "/Users/ckirkendall/Development/clojure/peli/src/peli/engine.cljs", :line 61, :column 7, :end-line 61, :end-column 14, :arglists (quote ([game]))}, :name peli.engine/sprites, :variadic false, :file "src/peli/engine.cljs", :end-column 14, :method-params ([game]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 61, :end-line 61, :max-fixed-arity 1, :fn-var true, :arglists (quote ([game]))}, hide-entity {:protocol-inline nil, :meta {:file "/Users/ckirkendall/Development/clojure/peli/src/peli/engine.cljs", :line 80, :column 8, :end-line 80, :end-column 19, :private true, :arglists (quote ([game id]))}, :private true, :name peli.engine/hide-entity, :variadic false, :file "src/peli/engine.cljs", :end-column 19, :method-params ([game id]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 80, :end-line 80, :max-fixed-arity 2, :fn-var true, :arglists (quote ([game id]))}, ->World {:protocol-inline nil, :meta {:file "/Users/ckirkendall/Development/clojure/peli/src/peli/engine.cljs", :line 89, :column 12, :end-line 89, :end-column 17, :internal-ctor true, :factory :positional, :arglists (quote ([board frame solids characters overlays framed registry sprites sounds key-actions run-state]))}, :name peli.engine/->World, :variadic false, :file "src/peli/engine.cljs", :end-column 17, :method-params ([board frame solids characters overlays framed registry sprites sounds key-actions run-state]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :positional, :line 89, :end-line 89, :max-fixed-arity 11, :fn-var true, :arglists (quote ([board frame solids characters overlays framed registry sprites sounds key-actions run-state]))}, solids {:protocol-inline nil, :meta {:file "/Users/ckirkendall/Development/clojure/peli/src/peli/engine.cljs", :line 67, :column 7, :end-line 67, :end-column 13, :arglists (quote ([game]))}, :name peli.engine/solids, :variadic false, :file "src/peli/engine.cljs", :end-column 13, :method-params ([game]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 67, :end-line 67, :max-fixed-arity 1, :fn-var true, :arglists (quote ([game]))}, init-collision-matrix {:protocol-inline nil, :meta {:file "/Users/ckirkendall/Development/clojure/peli/src/peli/engine.cljs", :line 259, :column 7, :end-line 259, :end-column 28, :arglists (quote ([game]))}, :name peli.engine/init-collision-matrix, :variadic false, :file "src/peli/engine.cljs", :end-column 28, :method-params ([game]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 259, :end-line 259, :max-fixed-arity 1, :fn-var true, :arglists (quote ([game]))}, -pause-game {:protocol-inline nil, :meta {:file "/Users/ckirkendall/Development/clojure/peli/src/peli/engine.cljs", :line 27, :column 4, :end-line 27, :end-column 15, :protocol peli.engine/IGame, :doc nil, :arglists (quote ([this]))}, :protocol peli.engine/IGame, :name peli.engine/-pause-game, :variadic false, :file "src/peli/engine.cljs", :end-column 15, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 25, :end-line 27, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc nil}, board {:protocol-inline nil, :meta {:file "/Users/ckirkendall/Development/clojure/peli/src/peli/engine.cljs", :line 64, :column 7, :end-line 64, :end-column 12, :arglists (quote ([game]))}, :name peli.engine/board, :variadic false, :file "src/peli/engine.cljs", :end-column 12, :method-params ([game]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 64, :end-line 64, :max-fixed-arity 1, :fn-var true, :arglists (quote ([game]))}, update-frame {:protocol-inline nil, :meta {:file "/Users/ckirkendall/Development/clojure/peli/src/peli/engine.cljs", :line 74, :column 8, :end-line 74, :end-column 20, :private true, :arglists (quote ([game func]))}, :private true, :name peli.engine/update-frame, :variadic false, :file "src/peli/engine.cljs", :end-column 20, :method-params ([game func]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 74, :end-line 74, :max-fixed-arity 2, :fn-var true, :arglists (quote ([game func]))}, block-size {:protocol-inline nil, :meta {:file "/Users/ckirkendall/Development/clojure/peli/src/peli/engine.cljs", :line 65, :column 7, :end-line 65, :end-column 17, :arglists (quote ([game]))}, :name peli.engine/block-size, :variadic false, :file "src/peli/engine.cljs", :end-column 17, :method-params ([game]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 65, :end-line 65, :max-fixed-arity 1, :fn-var true, :arglists (quote ([game]))}, -worlds {:protocol-inline nil, :meta {:file "/Users/ckirkendall/Development/clojure/peli/src/peli/engine.cljs", :line 39, :column 4, :end-line 39, :end-column 11, :protocol peli.engine/IGame, :doc nil, :arglists (quote ([this]))}, :protocol peli.engine/IGame, :name peli.engine/-worlds, :variadic false, :file "src/peli/engine.cljs", :end-column 11, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 25, :end-line 39, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc nil}, run-physics {:protocol-inline nil, :meta {:file "/Users/ckirkendall/Development/clojure/peli/src/peli/engine.cljs", :line 310, :column 7, :end-line 310, :end-column 18, :arglists (quote ([game ch]))}, :name peli.engine/run-physics, :variadic false, :file "src/peli/engine.cljs", :end-column 18, :method-params ([game ch]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 310, :end-line 310, :max-fixed-arity 2, :fn-var true, :arglists (quote ([game ch]))}, init-world {:protocol-inline nil, :meta {:file "/Users/ckirkendall/Development/clojure/peli/src/peli/engine.cljs", :line 82, :column 8, :end-line 82, :end-column 18, :private true, :arglists (quote ([game]))}, :private true, :name peli.engine/init-world, :variadic false, :file "src/peli/engine.cljs", :end-column 18, :method-params ([game]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 82, :end-line 82, :max-fixed-arity 1, :fn-var true, :arglists (quote ([game]))}, show-entity {:protocol-inline nil, :meta {:file "/Users/ckirkendall/Development/clojure/peli/src/peli/engine.cljs", :line 81, :column 8, :end-line 81, :end-column 19, :private true, :arglists (quote ([game id]))}, :private true, :name peli.engine/show-entity, :variadic false, :file "src/peli/engine.cljs", :end-column 19, :method-params ([game id]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 81, :end-line 81, :max-fixed-arity 2, :fn-var true, :arglists (quote ([game id]))}, replace-entities {:protocol-inline nil, :meta {:file "/Users/ckirkendall/Development/clojure/peli/src/peli/engine.cljs", :line 294, :column 7, :end-line 294, :end-column 23, :arglists (quote ([game chars]))}, :name peli.engine/replace-entities, :variadic false, :file "src/peli/engine.cljs", :end-column 23, :method-params ([game chars]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 294, :end-line 294, :max-fixed-arity 2, :fn-var true, :arglists (quote ([game chars]))}, overlays {:protocol-inline nil, :meta {:file "/Users/ckirkendall/Development/clojure/peli/src/peli/engine.cljs", :line 72, :column 7, :end-line 72, :end-column 15, :arglists (quote ([game]))}, :name peli.engine/overlays, :variadic false, :file "src/peli/engine.cljs", :end-column 15, :method-params ([game]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 72, :end-line 72, :max-fixed-arity 1, :fn-var true, :arglists (quote ([game]))}, unpause-game {:protocol-inline nil, :meta {:file "/Users/ckirkendall/Development/clojure/peli/src/peli/engine.cljs", :line 59, :column 7, :end-line 59, :end-column 19, :arglists (quote ([game]))}, :name peli.engine/unpause-game, :variadic false, :file "src/peli/engine.cljs", :end-column 19, :method-params ([game]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 59, :end-line 59, :max-fixed-arity 1, :fn-var true, :arglists (quote ([game]))}, -unpause-game {:protocol-inline nil, :meta {:file "/Users/ckirkendall/Development/clojure/peli/src/peli/engine.cljs", :line 28, :column 4, :end-line 28, :end-column 17, :protocol peli.engine/IGame, :doc nil, :arglists (quote ([this]))}, :protocol peli.engine/IGame, :name peli.engine/-unpause-game, :variadic false, :file "src/peli/engine.cljs", :end-column 17, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 25, :end-line 28, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc nil}, -state {:protocol-inline nil, :meta {:file "/Users/ckirkendall/Development/clojure/peli/src/peli/engine.cljs", :line 35, :column 4, :end-line 35, :end-column 10, :protocol peli.engine/IGame, :doc nil, :arglists (quote ([this]))}, :protocol peli.engine/IGame, :name peli.engine/-state, :variadic false, :file "src/peli/engine.cljs", :end-column 10, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 25, :end-line 35, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc nil}, generate-collision-list {:protocol-inline nil, :meta {:file "/Users/ckirkendall/Development/clojure/peli/src/peli/engine.cljs", :line 274, :column 7, :end-line 274, :end-column 30, :arglists (quote ([matrix block-size expanded-frame]))}, :name peli.engine/generate-collision-list, :variadic false, :file "src/peli/engine.cljs", :end-column 30, :method-params ([matrix block-size expanded-frame]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 274, :end-line 274, :max-fixed-arity 3, :fn-var true, :arglists (quote ([matrix block-size expanded-frame]))}, characters {:protocol-inline nil, :meta {:file "/Users/ckirkendall/Development/clojure/peli/src/peli/engine.cljs", :line 68, :column 7, :end-line 68, :end-column 17, :arglists (quote ([game]))}, :name peli.engine/characters, :variadic false, :file "src/peli/engine.cljs", :end-column 17, :method-params ([game]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 68, :end-line 68, :max-fixed-arity 1, :fn-var true, :arglists (quote ([game]))}, overlap? {:protocol-inline nil, :meta {:file "/Users/ckirkendall/Development/clojure/peli/src/peli/engine.cljs", :line 151, :column 7, :end-line 151, :end-column 15, :arglists (quote ([body1 body2]))}, :name peli.engine/overlap?, :variadic false, :file "src/peli/engine.cljs", :end-column 15, :method-params ([body1 body2]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 151, :end-line 151, :max-fixed-arity 2, :fn-var true, :arglists (quote ([body1 body2]))}, send-action {:protocol-inline nil, :meta {:file "/Users/ckirkendall/Development/clojure/peli/src/peli/engine.cljs", :line 386, :column 7, :end-line 386, :end-column 18, :arglists (quote ([ch action & args])), :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(ch action args)], :arglists ([ch action & args]), :arglists-meta (nil)}}, :name peli.engine/send-action, :variadic true, :file "src/peli/engine.cljs", :end-column 18, :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(ch action args)], :arglists ([ch action & args]), :arglists-meta (nil)}, :method-params [(ch action args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 386, :end-line 386, :max-fixed-arity 2, :fn-var true, :arglists ([ch action & args])}, framed-character {:protocol-inline nil, :meta {:file "/Users/ckirkendall/Development/clojure/peli/src/peli/engine.cljs", :line 73, :column 8, :end-line 73, :end-column 24, :private true, :arglists (quote ([game]))}, :private true, :name peli.engine/framed-character, :variadic false, :file "src/peli/engine.cljs", :end-column 24, :method-params ([game]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 73, :end-line 73, :max-fixed-arity 1, :fn-var true, :arglists (quote ([game]))}, -set-collision-matrix {:protocol-inline nil, :meta {:file "/Users/ckirkendall/Development/clojure/peli/src/peli/engine.cljs", :line 47, :column 4, :end-line 47, :end-column 25, :protocol peli.engine/IGame, :doc nil, :arglists (quote ([this matrix]))}, :protocol peli.engine/IGame, :name peli.engine/-set-collision-matrix, :variadic false, :file "src/peli/engine.cljs", :end-column 25, :method-params ([this matrix]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 25, :end-line 47, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this matrix])), :doc nil}, frame {:protocol-inline nil, :meta {:file "/Users/ckirkendall/Development/clojure/peli/src/peli/engine.cljs", :line 63, :column 7, :end-line 63, :end-column 12, :arglists (quote ([game]))}, :name peli.engine/frame, :variadic false, :file "src/peli/engine.cljs", :end-column 12, :method-params ([game]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 63, :end-line 63, :max-fixed-arity 1, :fn-var true, :arglists (quote ([game]))}, play-sound {:protocol-inline nil, :meta {:file "/Users/ckirkendall/Development/clojure/peli/src/peli/engine.cljs", :line 290, :column 7, :end-line 290, :end-column 17, :arglists (quote ([id]))}, :name peli.engine/play-sound, :variadic false, :file "src/peli/engine.cljs", :end-column 17, :method-params ([id]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 290, :end-line 290, :max-fixed-arity 1, :fn-var true, :arglists (quote ([id]))}, map->World {:protocol-inline nil, :meta {:file "/Users/ckirkendall/Development/clojure/peli/src/peli/engine.cljs", :line 89, :column 12, :end-line 89, :end-column 17, :internal-ctor true, :factory :map, :arglists (quote ([G__24682]))}, :name peli.engine/map->World, :variadic false, :file "src/peli/engine.cljs", :end-column 17, :method-params ([G__24682]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :map, :line 89, :end-line 89, :max-fixed-arity 1, :fn-var true, :arglists (quote ([G__24682]))}, Pen {:meta {:file "/Users/ckirkendall/Development/clojure/peli/src/peli/engine.cljs", :line 115, :column 14, :end-line 115, :end-column 17, :doc nil, :protocol-symbol true, :jsdoc ("@interface"), :protocol-info {:methods {draw [[this game ch]]}}}, :protocol-symbol true, :name peli.engine/Pen, :file "src/peli/engine.cljs", :end-column 17, :column 1, :line 115, :protocol-info {:methods {draw [[this game ch]]}}, :info nil, :end-line 115, :impls #{object}, :doc nil, :jsdoc ("@interface")}, adjust-frame {:protocol-inline nil, :meta {:file "/Users/ckirkendall/Development/clojure/peli/src/peli/engine.cljs", :line 363, :column 7, :end-line 363, :end-column 19, :arglists (quote ([game]))}, :name peli.engine/adjust-frame, :variadic false, :file "src/peli/engine.cljs", :end-column 19, :method-params ([game]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 363, :end-line 363, :max-fixed-arity 1, :fn-var true, :arglists (quote ([game]))}, initial-draw {:protocol-inline nil, :meta {:file "/Users/ckirkendall/Development/clojure/peli/src/peli/engine.cljs", :line 85, :column 8, :end-line 85, :end-column 20, :private true, :arglists (quote ([game ch target-id]))}, :private true, :name peli.engine/initial-draw, :variadic false, :file "src/peli/engine.cljs", :end-column 20, :method-params ([game ch target-id]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 85, :end-line 85, :max-fixed-arity 3, :fn-var true, :arglists (quote ([game ch target-id]))}, get-key-code {:protocol-inline nil, :meta {:file "/Users/ckirkendall/Development/clojure/peli/src/peli/engine.cljs", :line 336, :column 7, :end-line 336, :end-column 19, :arglists (quote ([event]))}, :name peli.engine/get-key-code, :variadic false, :file "src/peli/engine.cljs", :end-column 19, :method-params ([event]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 336, :end-line 336, :max-fixed-arity 1, :fn-var true, :arglists (quote ([event]))}, translate-coords {:protocol-inline nil, :meta {:file "/Users/ckirkendall/Development/clojure/peli/src/peli/engine.cljs", :line 167, :column 7, :end-line 167, :end-column 23, :arglists (quote ([obj frame]))}, :name peli.engine/translate-coords, :variadic false, :file "src/peli/engine.cljs", :end-column 23, :method-params ([obj frame]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 167, :end-line 167, :max-fixed-arity 2, :fn-var true, :arglists (quote ([obj frame]))}, Gravity {:meta {:file "/Users/ckirkendall/Development/clojure/peli/src/peli/engine.cljs", :line 109, :column 14, :end-line 109, :end-column 21, :doc nil, :protocol-symbol true, :jsdoc ("@interface"), :protocol-info {:methods {gravity [[this game ch]]}}}, :protocol-symbol true, :name peli.engine/Gravity, :file "src/peli/engine.cljs", :end-column 21, :column 1, :line 109, :protocol-info {:methods {gravity [[this game ch]]}}, :info nil, :end-line 109, :impls #{object}, :doc nil, :jsdoc ("@interface")}, schedule-action {:protocol-inline nil, :meta {:file "/Users/ckirkendall/Development/clojure/peli/src/peli/engine.cljs", :line 391, :column 7, :end-line 391, :end-column 22, :arglists (quote ([ch timing action & args])), :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(ch timing action args)], :arglists ([ch timing action & args]), :arglists-meta (nil)}}, :name peli.engine/schedule-action, :variadic true, :file "src/peli/engine.cljs", :end-column 22, :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(ch timing action args)], :arglists ([ch timing action & args]), :arglists-meta (nil)}, :method-params [(ch timing action args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 391, :end-line 391, :max-fixed-arity 3, :fn-var true, :arglists ([ch timing action & args])}, Game {:num-fields 3, :protocols #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IIterable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :name peli.engine/Game, :file "src/peli/engine.cljs", :end-column 16, :type true, :column 12, :internal-ctor true, :line 101, :record true, :end-line 101, :skip-protocol-flag #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}}, -init-world {:protocol-inline nil, :meta {:file "/Users/ckirkendall/Development/clojure/peli/src/peli/engine.cljs", :line 52, :column 4, :end-line 52, :end-column 15, :protocol peli.engine/IGame, :doc nil, :arglists (quote ([this]))}, :protocol peli.engine/IGame, :name peli.engine/-init-world, :variadic false, :file "src/peli/engine.cljs", :end-column 15, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 25, :end-line 52, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc nil}, -update-state {:protocol-inline nil, :meta {:file "/Users/ckirkendall/Development/clojure/peli/src/peli/engine.cljs", :line 45, :column 4, :end-line 45, :end-column 17, :protocol peli.engine/IGame, :doc nil, :arglists (quote ([this func]))}, :protocol peli.engine/IGame, :name peli.engine/-update-state, :variadic false, :file "src/peli/engine.cljs", :end-column 17, :method-params ([this func]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 25, :end-line 45, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this func])), :doc nil}, -key-actions {:protocol-inline nil, :meta {:file "/Users/ckirkendall/Development/clojure/peli/src/peli/engine.cljs", :line 43, :column 4, :end-line 43, :end-column 16, :protocol peli.engine/IGame, :doc nil, :arglists (quote ([this world-id]))}, :protocol peli.engine/IGame, :name peli.engine/-key-actions, :variadic false, :file "src/peli/engine.cljs", :end-column 16, :method-params ([this world-id]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 25, :end-line 43, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this world-id])), :doc nil}, collide-solid {:protocol-inline nil, :meta {:file "/Users/ckirkendall/Development/clojure/peli/src/peli/engine.cljs", :line 209, :column 7, :end-line 209, :end-column 20, :arglists (quote ([{:keys [height width x y vx vy], :as body1} {x2 :x, y2 :y, h2 :height, w2 :width, :as body2}]))}, :name peli.engine/collide-solid, :variadic false, :file "src/peli/engine.cljs", :end-column 20, :method-params ([p__24744 p__24745]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 209, :end-line 209, :max-fixed-arity 2, :fn-var true, :arglists (quote ([{:keys [height width x y vx vy], :as body1} {x2 :x, y2 :y, h2 :height, w2 :width, :as body2}]))}, key-actions {:protocol-inline nil, :meta {:file "/Users/ckirkendall/Development/clojure/peli/src/peli/engine.cljs", :line 84, :column 8, :end-line 84, :end-column 19, :private true, :arglists (quote ([game world-id]))}, :private true, :name peli.engine/key-actions, :variadic false, :file "src/peli/engine.cljs", :end-column 19, :method-params ([game world-id]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 84, :end-line 84, :max-fixed-arity 2, :fn-var true, :arglists (quote ([game world-id]))}, debug {:protocol-inline nil, :meta {:file "/Users/ckirkendall/Development/clojure/peli/src/peli/engine.cljs", :line 86, :column 7, :end-line 86, :end-column 12, :arglists (quote ([game]))}, :name peli.engine/debug, :variadic false, :file "src/peli/engine.cljs", :end-column 12, :method-params ([game]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 86, :end-line 86, :max-fixed-arity 1, :fn-var true, :arglists (quote ([game]))}, switch-worlds {:protocol-inline nil, :meta {:file "/Users/ckirkendall/Development/clojure/peli/src/peli/engine.cljs", :line 78, :column 8, :end-line 78, :end-column 21, :private true, :arglists (quote ([game world-id]))}, :private true, :name peli.engine/switch-worlds, :variadic false, :file "src/peli/engine.cljs", :end-column 21, :method-params ([game world-id]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 78, :end-line 78, :max-fixed-arity 2, :fn-var true, :arglists (quote ([game world-id]))}, -framed-character {:protocol-inline nil, :meta {:file "/Users/ckirkendall/Development/clojure/peli/src/peli/engine.cljs", :line 42, :column 4, :end-line 42, :end-column 21, :protocol peli.engine/IGame, :doc nil, :arglists (quote ([this]))}, :protocol peli.engine/IGame, :name peli.engine/-framed-character, :variadic false, :file "src/peli/engine.cljs", :end-column 21, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 25, :end-line 42, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc nil}, debug-flag {:name peli.engine/debug-flag, :file "src/peli/engine.cljs", :line 16, :column 1, :end-line 16, :end-column 20, :meta {:file "/Users/ckirkendall/Development/clojure/peli/src/peli/engine.cljs", :line 16, :column 10, :end-line 16, :end-column 20}}, matrix-bounds {:protocol-inline nil, :meta {:file "/Users/ckirkendall/Development/clojure/peli/src/peli/engine.cljs", :line 218, :column 7, :end-line 218, :end-column 20, :arglists (quote ([block-size {:keys [x y width height]}]))}, :name peli.engine/matrix-bounds, :variadic false, :file "src/peli/engine.cljs", :end-column 20, :method-params ([block-size p__24754]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 218, :end-line 218, :max-fixed-arity 2, :fn-var true, :arglists (quote ([block-size {:keys [x y width height]}]))}, handle-collision {:protocol-inline nil, :meta {:file "/Users/ckirkendall/Development/clojure/peli/src/peli/engine.cljs", :line 301, :column 7, :end-line 301, :end-column 23, :arglists (quote ([ch game pair]))}, :name peli.engine/handle-collision, :variadic false, :file "src/peli/engine.cljs", :end-column 23, :method-params ([ch game pair]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 301, :end-line 301, :max-fixed-arity 3, :fn-var true, :arglists (quote ([ch game pair]))}, -initial-draw {:protocol-inline nil, :meta {:file "/Users/ckirkendall/Development/clojure/peli/src/peli/engine.cljs", :line 54, :column 4, :end-line 54, :end-column 17, :protocol peli.engine/IGame, :doc nil, :arglists (quote ([this ch target-id]))}, :protocol peli.engine/IGame, :name peli.engine/-initial-draw, :variadic false, :file "src/peli/engine.cljs", :end-column 17, :method-params ([this ch target-id]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 25, :end-line 54, :max-fixed-arity 3, :fn-var true, :arglists (quote ([this ch target-id])), :doc nil}, -overlays {:protocol-inline nil, :meta {:file "/Users/ckirkendall/Development/clojure/peli/src/peli/engine.cljs", :line 41, :column 4, :end-line 41, :end-column 13, :protocol peli.engine/IGame, :doc nil, :arglists (quote ([this]))}, :protocol peli.engine/IGame, :name peli.engine/-overlays, :variadic false, :file "src/peli/engine.cljs", :end-column 13, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 25, :end-line 41, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc nil}, state {:protocol-inline nil, :meta {:file "/Users/ckirkendall/Development/clojure/peli/src/peli/engine.cljs", :line 66, :column 7, :end-line 66, :end-column 12, :arglists (quote ([game]))}, :name peli.engine/state, :variadic false, :file "src/peli/engine.cljs", :end-column 12, :method-params ([game]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 66, :end-line 66, :max-fixed-arity 1, :fn-var true, :arglists (quote ([game]))}, Physics {:meta {:file "/Users/ckirkendall/Development/clojure/peli/src/peli/engine.cljs", :line 112, :column 14, :end-line 112, :end-column 21, :doc nil, :protocol-symbol true, :jsdoc ("@interface"), :protocol-info {:methods {physics [[this time-diff game ch]]}}}, :protocol-symbol true, :name peli.engine/Physics, :file "src/peli/engine.cljs", :end-column 21, :column 1, :line 112, :protocol-info {:methods {physics [[this time-diff game ch]]}}, :info nil, :end-line 112, :impls #{object}, :doc nil, :jsdoc ("@interface")}, worlds {:protocol-inline nil, :meta {:file "/Users/ckirkendall/Development/clojure/peli/src/peli/engine.cljs", :line 70, :column 7, :end-line 70, :end-column 13, :arglists (quote ([game]))}, :name peli.engine/worlds, :variadic false, :file "src/peli/engine.cljs", :end-column 13, :method-params ([game]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 70, :end-line 70, :max-fixed-arity 1, :fn-var true, :arglists (quote ([game]))}, -fps {:protocol-inline nil, :meta {:file "/Users/ckirkendall/Development/clojure/peli/src/peli/engine.cljs", :line 29, :column 4, :end-line 29, :end-column 8, :protocol peli.engine/IGame, :doc nil, :arglists (quote ([this]))}, :protocol peli.engine/IGame, :name peli.engine/-fps, :variadic false, :file "src/peli/engine.cljs", :end-column 8, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 25, :end-line 29, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc nil}, gravity {:protocol-inline nil, :meta {:file "/Users/ckirkendall/Development/clojure/peli/src/peli/engine.cljs", :line 110, :column 4, :end-line 110, :end-column 11, :protocol peli.engine/Gravity, :doc nil, :arglists (quote ([this game ch]))}, :protocol peli.engine/Gravity, :name peli.engine/gravity, :variadic false, :file "src/peli/engine.cljs", :end-column 11, :method-params ([this game ch]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 109, :end-line 110, :max-fixed-arity 3, :fn-var true, :arglists (quote ([this game ch])), :doc nil}, edit-loop {:protocol-inline nil, :meta {:file "/Users/ckirkendall/Development/clojure/peli/src/peli/engine.cljs", :line 395, :column 7, :end-line 395, :end-column 16, :arglists (quote ([ch timing action & args])), :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(ch timing action args)], :arglists ([ch timing action & args]), :arglists-meta (nil)}}, :name peli.engine/edit-loop, :variadic true, :file "src/peli/engine.cljs", :end-column 16, :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(ch timing action args)], :arglists ([ch timing action & args]), :arglists-meta (nil)}, :method-params [(ch timing action args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 395, :end-line 395, :max-fixed-arity 3, :fn-var true, :arglists ([ch timing action & args])}, -solids {:protocol-inline nil, :meta {:file "/Users/ckirkendall/Development/clojure/peli/src/peli/engine.cljs", :line 36, :column 4, :end-line 36, :end-column 11, :protocol peli.engine/IGame, :doc nil, :arglists (quote ([this]))}, :protocol peli.engine/IGame, :name peli.engine/-solids, :variadic false, :file "src/peli/engine.cljs", :end-column 11, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 25, :end-line 36, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc nil}, physics {:protocol-inline nil, :meta {:file "/Users/ckirkendall/Development/clojure/peli/src/peli/engine.cljs", :line 113, :column 4, :end-line 113, :end-column 11, :protocol peli.engine/Physics, :doc nil, :arglists (quote ([this time-diff game ch]))}, :protocol peli.engine/Physics, :name peli.engine/physics, :variadic false, :file "src/peli/engine.cljs", :end-column 11, :method-params ([this time-diff game ch]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 112, :end-line 113, :max-fixed-arity 4, :fn-var true, :arglists (quote ([this time-diff game ch])), :doc nil}, -entity {:protocol-inline nil, :meta {:file "/Users/ckirkendall/Development/clojure/peli/src/peli/engine.cljs", :line 38, :column 4, :end-line 38, :end-column 11, :protocol peli.engine/IGame, :doc nil, :arglists (quote ([this id]))}, :protocol peli.engine/IGame, :name peli.engine/-entity, :variadic false, :file "src/peli/engine.cljs", :end-column 11, :method-params ([this id]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 25, :end-line 38, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this id])), :doc nil}, -show-entity {:protocol-inline nil, :meta {:file "/Users/ckirkendall/Development/clojure/peli/src/peli/engine.cljs", :line 51, :column 4, :end-line 51, :end-column 16, :protocol peli.engine/IGame, :doc nil, :arglists (quote ([this id]))}, :protocol peli.engine/IGame, :name peli.engine/-show-entity, :variadic false, :file "src/peli/engine.cljs", :end-column 16, :method-params ([this id]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 25, :end-line 51, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this id])), :doc nil}, -block-size {:protocol-inline nil, :meta {:file "/Users/ckirkendall/Development/clojure/peli/src/peli/engine.cljs", :line 34, :column 4, :end-line 34, :end-column 15, :protocol peli.engine/IGame, :doc nil, :arglists (quote ([this]))}, :protocol peli.engine/IGame, :name peli.engine/-block-size, :variadic false, :file "src/peli/engine.cljs", :end-column 15, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 25, :end-line 34, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc nil}, fps {:protocol-inline nil, :meta {:file "/Users/ckirkendall/Development/clojure/peli/src/peli/engine.cljs", :line 60, :column 7, :end-line 60, :end-column 10, :arglists (quote ([game]))}, :name peli.engine/fps, :variadic false, :file "src/peli/engine.cljs", :end-column 10, :method-params ([game]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 60, :end-line 60, :max-fixed-arity 1, :fn-var true, :arglists (quote ([game]))}, set-world {:protocol-inline nil, :meta {:file "/Users/ckirkendall/Development/clojure/peli/src/peli/engine.cljs", :line 405, :column 8, :end-line 405, :end-column 17, :private true, :arglists (quote ([game ch world-id]))}, :private true, :name peli.engine/set-world, :variadic false, :file "src/peli/engine.cljs", :end-column 17, :method-params ([game ch world-id]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 405, :end-line 405, :max-fixed-arity 3, :fn-var true, :arglists (quote ([game ch world-id]))}, run-state {:protocol-inline nil, :meta {:file "/Users/ckirkendall/Development/clojure/peli/src/peli/engine.cljs", :line 57, :column 7, :end-line 57, :end-column 16, :arglists (quote ([game]))}, :name peli.engine/run-state, :variadic false, :file "src/peli/engine.cljs", :end-column 16, :method-params ([game]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 57, :end-line 57, :max-fixed-arity 1, :fn-var true, :arglists (quote ([game]))}, -world {:protocol-inline nil, :meta {:file "/Users/ckirkendall/Development/clojure/peli/src/peli/engine.cljs", :line 40, :column 4, :end-line 40, :end-column 10, :protocol peli.engine/IGame, :doc nil, :arglists (quote ([this id]))}, :protocol peli.engine/IGame, :name peli.engine/-world, :variadic false, :file "src/peli/engine.cljs", :end-column 10, :method-params ([this id]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 25, :end-line 40, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this id])), :doc nil}, -sounds {:protocol-inline nil, :meta {:file "/Users/ckirkendall/Development/clojure/peli/src/peli/engine.cljs", :line 31, :column 4, :end-line 31, :end-column 11, :protocol peli.engine/IGame, :doc nil, :arglists (quote ([game]))}, :protocol peli.engine/IGame, :name peli.engine/-sounds, :variadic false, :file "src/peli/engine.cljs", :end-column 11, :method-params ([game]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 25, :end-line 31, :max-fixed-arity 1, :fn-var true, :arglists (quote ([game])), :doc nil}, -frame {:protocol-inline nil, :meta {:file "/Users/ckirkendall/Development/clojure/peli/src/peli/engine.cljs", :line 32, :column 4, :end-line 32, :end-column 10, :protocol peli.engine/IGame, :doc nil, :arglists (quote ([this]))}, :protocol peli.engine/IGame, :name peli.engine/-frame, :variadic false, :file "src/peli/engine.cljs", :end-column 10, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 25, :end-line 32, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc nil}, world {:protocol-inline nil, :meta {:file "/Users/ckirkendall/Development/clojure/peli/src/peli/engine.cljs", :line 71, :column 7, :end-line 71, :end-column 12, :arglists (quote ([game id]))}, :name peli.engine/world, :variadic false, :file "src/peli/engine.cljs", :end-column 12, :method-params ([game id]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 71, :end-line 71, :max-fixed-arity 2, :fn-var true, :arglists (quote ([game id]))}, map->Game {:protocol-inline nil, :meta {:file "/Users/ckirkendall/Development/clojure/peli/src/peli/engine.cljs", :line 101, :column 12, :end-line 101, :end-column 16, :internal-ctor true, :factory :map, :arglists (quote ([G__24690]))}, :name peli.engine/map->Game, :variadic false, :file "src/peli/engine.cljs", :end-column 16, :method-params ([G__24690]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :map, :line 101, :end-line 101, :max-fixed-arity 1, :fn-var true, :arglists (quote ([G__24690]))}, collide-action {:protocol-inline nil, :meta {:file "/Users/ckirkendall/Development/clojure/peli/src/peli/engine.cljs", :line 190, :column 7, :end-line 190, :end-column 21, :arglists (quote ([{:keys [height width x y vx vy], :as body1} {x2 :x, y2 :y, h2 :height, w2 :width, :as body2} actions]))}, :name peli.engine/collide-action, :variadic false, :file "src/peli/engine.cljs", :end-column 21, :method-params ([p__24724 p__24725 actions]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 190, :end-line 190, :max-fixed-arity 3, :fn-var true, :arglists (quote ([{:keys [height width x y vx vy], :as body1} {x2 :x, y2 :y, h2 :height, w2 :width, :as body2} actions]))}, print-item-location {:protocol-inline nil, :meta {:file "/Users/ckirkendall/Development/clojure/peli/src/peli/engine.cljs", :line 237, :column 7, :end-line 237, :end-column 26, :arglists (quote ([matrix block-size id]))}, :name peli.engine/print-item-location, :variadic false, :file "src/peli/engine.cljs", :end-column 26, :method-params ([matrix block-size id]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 237, :end-line 237, :max-fixed-arity 3, :fn-var true, :arglists (quote ([matrix block-size id]))}, code->action {:protocol-inline nil, :meta {:file "/Users/ckirkendall/Development/clojure/peli/src/peli/engine.cljs", :line 343, :column 8, :end-line 343, :end-column 20, :private true, :arglists (quote ([actions key]))}, :private true, :name peli.engine/code->action, :variadic false, :file "src/peli/engine.cljs", :end-column 20, :method-params ([actions key]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 343, :end-line 343, :max-fixed-arity 2, :fn-var true, :arglists (quote ([actions key]))}, -hide-entity {:protocol-inline nil, :meta {:file "/Users/ckirkendall/Development/clojure/peli/src/peli/engine.cljs", :line 50, :column 4, :end-line 50, :end-column 16, :protocol peli.engine/IGame, :doc nil, :arglists (quote ([this id]))}, :protocol peli.engine/IGame, :name peli.engine/-hide-entity, :variadic false, :file "src/peli/engine.cljs", :end-column 16, :method-params ([this id]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 25, :end-line 50, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this id])), :doc nil}, collide {:protocol-inline nil, :meta {:file "/Users/ckirkendall/Development/clojure/peli/src/peli/engine.cljs", :line 119, :column 5, :end-line 119, :end-column 12, :protocol peli.engine/Collision, :doc nil, :arglists (quote ([this body game ch]))}, :protocol peli.engine/Collision, :name peli.engine/collide, :variadic false, :file "src/peli/engine.cljs", :end-column 12, :method-params ([this body game ch]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 118, :end-line 119, :max-fixed-arity 4, :fn-var true, :arglists (quote ([this body game ch])), :doc nil}, init-game {:protocol-inline nil, :meta {:file "/Users/ckirkendall/Development/clojure/peli/src/peli/engine.cljs", :line 446, :column 7, :end-line 446, :end-column 16, :arglists (quote ([game world-id] [game world-id debug])), :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([game world-id] [game world-id debug]), :arglists ([game world-id] [game world-id debug]), :arglists-meta (nil nil)}}, :name peli.engine/init-game, :variadic false, :file "src/peli/engine.cljs", :end-column 16, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([game world-id] [game world-id debug]), :arglists ([game world-id] [game world-id debug]), :arglists-meta (nil nil)}, :method-params ([game world-id] [game world-id debug]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 446, :end-line 446, :max-fixed-arity 3, :fn-var true, :arglists ([game world-id] [game world-id debug])}, -collision-matrix {:protocol-inline nil, :meta {:file "/Users/ckirkendall/Development/clojure/peli/src/peli/engine.cljs", :line 46, :column 4, :end-line 46, :end-column 21, :protocol peli.engine/IGame, :doc nil, :arglists (quote ([this]))}, :protocol peli.engine/IGame, :name peli.engine/-collision-matrix, :variadic false, :file "src/peli/engine.cljs", :end-column 21, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 25, :end-line 46, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc nil}, update-entity {:protocol-inline nil, :meta {:file "/Users/ckirkendall/Development/clojure/peli/src/peli/engine.cljs", :line 79, :column 8, :end-line 79, :end-column 21, :private true, :arglists (quote ([game id func]))}, :private true, :name peli.engine/update-entity, :variadic false, :file "src/peli/engine.cljs", :end-column 21, :method-params ([game id func]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 79, :end-line 79, :max-fixed-arity 3, :fn-var true, :arglists (quote ([game id func]))}, handle-keys {:protocol-inline nil, :meta {:file "/Users/ckirkendall/Development/clojure/peli/src/peli/engine.cljs", :line 347, :column 7, :end-line 347, :end-column 18, :arglists (quote ([ch actions]))}, :name peli.engine/handle-keys, :variadic false, :file "src/peli/engine.cljs", :end-column 18, :method-params ([ch actions]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 347, :end-line 347, :max-fixed-arity 2, :fn-var true, :arglists (quote ([ch actions]))}, set-collision-matrix {:protocol-inline nil, :meta {:file "/Users/ckirkendall/Development/clojure/peli/src/peli/engine.cljs", :line 76, :column 8, :end-line 76, :end-column 28, :private true, :arglists (quote ([game matrix]))}, :private true, :name peli.engine/set-collision-matrix, :variadic false, :file "src/peli/engine.cljs", :end-column 28, :method-params ([game matrix]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 76, :end-line 76, :max-fixed-arity 2, :fn-var true, :arglists (quote ([game matrix]))}, -update-frame {:protocol-inline nil, :meta {:file "/Users/ckirkendall/Development/clojure/peli/src/peli/engine.cljs", :line 44, :column 4, :end-line 44, :end-column 17, :protocol peli.engine/IGame, :doc nil, :arglists (quote ([this func]))}, :protocol peli.engine/IGame, :name peli.engine/-update-frame, :variadic false, :file "src/peli/engine.cljs", :end-column 17, :method-params ([this func]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 25, :end-line 44, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this func])), :doc nil}, IGame {:meta {:file "/Users/ckirkendall/Development/clojure/peli/src/peli/engine.cljs", :line 25, :column 14, :end-line 25, :end-column 19, :doc nil, :protocol-symbol true, :jsdoc ("@interface"), :protocol-info {:methods {-sprites [[this]], -step [[this ch]], -update-entity [[this id func]], -switch-worlds [[this world-id]], -pause-game [[this]], -worlds [[this]], -unpause-game [[this]], -state [[this]], -set-collision-matrix [[this matrix]], -init-world [[this]], -update-state [[this func]], -key-actions [[this world-id]], -framed-character [[this]], -initial-draw [[this ch target-id]], -overlays [[this]], -fps [[this]], -solids [[this]], -entity [[this id]], -show-entity [[this id]], -block-size [[this]], -world [[this id]], -sounds [[game]], -frame [[this]], -hide-entity [[this id]], -collision-matrix [[this]], -update-frame [[this func]], -debug [[this]], -run-state [[this]], -board [[this]], -charaters [[this]]}}}, :protocol-symbol true, :name peli.engine/IGame, :file "src/peli/engine.cljs", :end-column 19, :column 1, :line 25, :protocol-info {:methods {-sprites [[this]], -step [[this ch]], -update-entity [[this id func]], -switch-worlds [[this world-id]], -pause-game [[this]], -worlds [[this]], -unpause-game [[this]], -state [[this]], -set-collision-matrix [[this matrix]], -init-world [[this]], -update-state [[this func]], -key-actions [[this world-id]], -framed-character [[this]], -initial-draw [[this ch target-id]], -overlays [[this]], -fps [[this]], -solids [[this]], -entity [[this id]], -show-entity [[this id]], -block-size [[this]], -world [[this id]], -sounds [[game]], -frame [[this]], -hide-entity [[this id]], -collision-matrix [[this]], -update-frame [[this func]], -debug [[this]], -run-state [[this]], -board [[this]], -charaters [[this]]}}, :info nil, :end-line 25, :impls #{}, :doc nil, :jsdoc ("@interface")}, apply-gravity {:protocol-inline nil, :meta {:file "/Users/ckirkendall/Development/clojure/peli/src/peli/engine.cljs", :line 172, :column 7, :end-line 172, :end-column 20, :arglists (quote ([obj] [obj gravity t-velocity])), :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([obj] [obj gravity t-velocity]), :arglists ([obj] [obj gravity t-velocity]), :arglists-meta (nil nil)}}, :name peli.engine/apply-gravity, :variadic false, :file "src/peli/engine.cljs", :end-column 20, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([obj] [obj gravity t-velocity]), :arglists ([obj] [obj gravity t-velocity]), :arglists-meta (nil nil)}, :method-params ([obj] [obj gravity t-velocity]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 172, :end-line 172, :max-fixed-arity 3, :fn-var true, :arglists ([obj] [obj gravity t-velocity])}, -debug {:protocol-inline nil, :meta {:file "/Users/ckirkendall/Development/clojure/peli/src/peli/engine.cljs", :line 55, :column 4, :end-line 55, :end-column 10, :protocol peli.engine/IGame, :doc nil, :arglists (quote ([this]))}, :protocol peli.engine/IGame, :name peli.engine/-debug, :variadic false, :file "src/peli/engine.cljs", :end-column 10, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 25, :end-line 55, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc nil}, pause-game {:protocol-inline nil, :meta {:file "/Users/ckirkendall/Development/clojure/peli/src/peli/engine.cljs", :line 58, :column 7, :end-line 58, :end-column 17, :arglists (quote ([game]))}, :name peli.engine/pause-game, :variadic false, :file "src/peli/engine.cljs", :end-column 17, :method-params ([game]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 58, :end-line 58, :max-fixed-arity 1, :fn-var true, :arglists (quote ([game]))}, Collision {:meta {:file "/Users/ckirkendall/Development/clojure/peli/src/peli/engine.cljs", :line 118, :column 14, :end-line 118, :end-column 23, :doc nil, :protocol-symbol true, :jsdoc ("@interface"), :protocol-info {:methods {collide [[this body game ch]]}}}, :protocol-symbol true, :name peli.engine/Collision, :file "src/peli/engine.cljs", :end-column 23, :column 1, :line 118, :protocol-info {:methods {collide [[this body game ch]]}}, :info nil, :end-line 118, :impls #{object}, :doc nil, :jsdoc ("@interface")}, -run-state {:protocol-inline nil, :meta {:file "/Users/ckirkendall/Development/clojure/peli/src/peli/engine.cljs", :line 26, :column 4, :end-line 26, :end-column 14, :protocol peli.engine/IGame, :doc nil, :arglists (quote ([this]))}, :protocol peli.engine/IGame, :name peli.engine/-run-state, :variadic false, :file "src/peli/engine.cljs", :end-column 14, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 25, :end-line 26, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc nil}, generate-pairs {:protocol-inline nil, :meta {:file "/Users/ckirkendall/Development/clojure/peli/src/peli/engine.cljs", :line 268, :column 7, :end-line 268, :end-column 21, :arglists (quote ([[el & next]]))}, :name peli.engine/generate-pairs, :variadic false, :file "src/peli/engine.cljs", :end-column 21, :method-params ([p__24850]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 268, :end-line 268, :max-fixed-arity 1, :fn-var true, :arglists (quote ([[el & next]]))}, add-items-to-matrix {:protocol-inline nil, :meta {:file "/Users/ckirkendall/Development/clojure/peli/src/peli/engine.cljs", :line 244, :column 7, :end-line 244, :end-column 26, :arglists (quote ([matrix block-size items]))}, :name peli.engine/add-items-to-matrix, :variadic false, :file "src/peli/engine.cljs", :end-column 26, :method-params ([matrix block-size items]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 244, :end-line 244, :max-fixed-arity 3, :fn-var true, :arglists (quote ([matrix block-size items]))}, -board {:protocol-inline nil, :meta {:file "/Users/ckirkendall/Development/clojure/peli/src/peli/engine.cljs", :line 33, :column 4, :end-line 33, :end-column 10, :protocol peli.engine/IGame, :doc nil, :arglists (quote ([this]))}, :protocol peli.engine/IGame, :name peli.engine/-board, :variadic false, :file "src/peli/engine.cljs", :end-column 10, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 25, :end-line 33, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc nil}, -charaters {:protocol-inline nil, :meta {:file "/Users/ckirkendall/Development/clojure/peli/src/peli/engine.cljs", :line 37, :column 4, :end-line 37, :end-column 14, :protocol peli.engine/IGame, :doc nil, :arglists (quote ([this]))}, :protocol peli.engine/IGame, :name peli.engine/-charaters, :variadic false, :file "src/peli/engine.cljs", :end-column 14, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 25, :end-line 37, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc nil}, add-item-to-matrix {:protocol-inline nil, :meta {:file "/Users/ckirkendall/Development/clojure/peli/src/peli/engine.cljs", :line 226, :column 7, :end-line 226, :end-column 25, :arglists (quote ([matrix block-size {:keys [id], :as item}]))}, :name peli.engine/add-item-to-matrix, :variadic false, :file "src/peli/engine.cljs", :end-column 25, :method-params ([matrix block-size p__24759]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 226, :end-line 226, :max-fixed-arity 3, :fn-var true, :arglists (quote ([matrix block-size {:keys [id], :as item}]))}, restor-entity {:protocol-inline nil, :meta {:file "/Users/ckirkendall/Development/clojure/peli/src/peli/engine.cljs", :line 414, :column 7, :end-line 414, :end-column 20, :arglists (quote ([game]))}, :name peli.engine/restor-entity, :variadic false, :file "src/peli/engine.cljs", :end-column 20, :method-params ([game]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 414, :end-line 414, :max-fixed-arity 1, :fn-var true, :arglists (quote ([game]))}, collision-matrix {:protocol-inline nil, :meta {:file "/Users/ckirkendall/Development/clojure/peli/src/peli/engine.cljs", :line 75, :column 8, :end-line 75, :end-column 24, :private true, :arglists (quote ([game]))}, :private true, :name peli.engine/collision-matrix, :variadic false, :file "src/peli/engine.cljs", :end-column 24, :method-params ([game]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 75, :end-line 75, :max-fixed-arity 1, :fn-var true, :arglists (quote ([game]))}, run-loop {:protocol-inline nil, :meta {:file "/Users/ckirkendall/Development/clojure/peli/src/peli/engine.cljs", :line 416, :column 7, :end-line 416, :end-column 15, :arglists (quote ([ch game debug-ch]))}, :name peli.engine/run-loop, :variadic false, :file "src/peli/engine.cljs", :end-column 15, :method-params ([ch game debug-ch]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 416, :end-line 416, :max-fixed-arity 3, :fn-var true, :arglists (quote ([ch game debug-ch]))}}, :require-macros {cljs.core.async.macros cljs.core.async.macros, cljs.pprint cljs.pprint}, :cljs.analyzer/constants {:seen #{:y :args sounds :overlays :characters :framed :frame sprites :on-up :bottom solids :else board :game :top overlays :active-world characters :registry :width frame framed :on-down :recur :key-actions :debug :state :worlds :run-state active-world registry :event :vx key-actions :vy :hidden :id state worlds :right :debug-ch run-state :action :event-ch :sounds :x :quit :step :buffer :sprites :height :board :any :left :solids}, :order [:board :frame :solids :characters :overlays :framed :registry :sprites :sounds :key-actions :run-state board frame solids characters overlays framed registry sprites sounds key-actions run-state :worlds :active-world :state worlds active-world state :x :y :width :height :else :vy :vx :bottom :right :top :left :any :id :hidden :on-down :on-up :buffer :debug :action :args :recur :step :event :quit :event-ch :debug-ch :game]}, :doc nil}